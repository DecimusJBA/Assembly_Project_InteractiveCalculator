Microsoft (R) Macro Assembler Version 14.29.30141.0	    03/17/23 13:35:53
InteractiveCalculator.asm				     Page 1 - 1


				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				;; Computer Science Assembly Language 							   ;;
				;; Program: Interactive Integer Calculator						   ;;
				;; Requires: Arrow Keys to navigate the calculator.                ;;
				;;			 Display Limit is 15 characters.					   ;;
				;; Instructions: Use Arrow keys to select numbers and press enter  ;;
				;;				 per each selection.                               ;;
				;;				 select first number.							   ;;
				;;				 select operator.								   ;;
				;;				 select equal sign.                                ;;
				;;				 The solution will be display in the message box.  ;;
				;;				 IF you select 'C', it will clear the message box. ;;
				;;				 and allow you to perform another calculation.	   ;;
				;; QUIT: press Esc key, this will terminate the program.           ;;
				;; Limitations: Cannot handle negative or multiple line            ;;
				;; calculations.												   ;;
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
 00000000			.data
				;---Control Characters---;
 = 00000000			NULL	EQU 00h				;Zero Value.
 = 0000000A			LF		EQU 0ah             ;Line Feed.
 = 0000000D			CR		EQU 0dh				;Carriage Return.
 = 00000020			SPC 	EQU 20h				;Space.
 = 0000001B			ECP		EQU 1Bh				;esc key.

				;---Arrow Keys---;
 = 0000004B			LA		EQU 4Bh				;Left  Arrow.
 = 0000004D			RA		EQU	4Dh				;Right Arrow.
 = 00000048			UA		EQU	48h				;Up    Arrow.
 = 00000050			DA		EQU 50h				;Down  Arrow.
 = 00000043			CLR		=   'C'				;'C' for clear screen.
				;---Bounds---;
 = 00000010			MAX_R = 16					;cannot be greater than 18 (far right digit on cal).
 = 00000004			MAX_L = 4					;cannot be less than 4 (far left digit on cal).
 = 00000005			MAX_U = 5					;cannot be less than 5 (far up digit on cal).
 = 0000000B			MAX_D = 11					;cannot be greater than 11 (far down digit on cal).
 = 0000000F			aLimit		EQU  	15		;Limit Length of Answer to display size.

				;---Storage for Numerical Values---;
 00000000 0000000A		TEN			dword	10		;used in ATOI, ITOA procedures.						
 00000004 02			ANS_ROW		byte	 2		;Answer Row.
 00000005 12			ANS_COL		byte    18		;Answer Column.

				;---CALCULATOR ON CONSOLE---;
 00000006 20 5F 5F 5F 5F	calStr	    byte " ___________________  ",CR,LF       ;ROW 0, 22 length
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   20 20 0D 0A
 0000001E  7C 20 20 5F 5F				byte "|  _______________  | ",CR,LF       ;ROW 1, 22 length
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 20 20
	   7C 20 0D 0A
 00000036  7C 20 7C 20 20				byte "| |               | | ",CR,LF       ;ROW 2, 22 length
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 7C 20
	   7C 20 0D 0A
 0000004E  7C 20 7C 5F 5F				byte "| |_______________| | ",CR,LF       ;ROW 3, 22 length
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 7C 20
	   7C 20 0D 0A
 00000066  7C 20 20 5F 5F				byte "|  ___ ___ ___ ___  | ",CR,LF       ;ROW 4, 22 length
	   5F 20 5F 5F 5F
	   20 5F 5F 5F 20
	   5F 5F 5F 20 20
	   7C 20 0D 0A
 0000007E  7C 20 7C 20 37				byte "| | 7 | 8 | 9 | + | | ",CR,LF       ;ROW 5, 22 length (7)= 4pos, (8)= 8pos, (9)= 12pos, (+)= 16pos
	   20 7C 20 38 20
	   7C 20 39 20 7C
	   20 2B 20 7C 20
	   7C 20 0D 0A
 00000096  7C 20 7C 5F 5F				byte "| |___|___|___|___| | ",CR,LF       ;ROW 6, 22 length
	   5F 7C 5F 5F 5F
	   7C 5F 5F 5F 7C
	   5F 5F 5F 7C 20
	   7C 20 0D 0A
 000000AE  7C 20 7C 20 34				byte "| | 4 | 5 | 6 | - | | ",CR,LF       ;ROW 7, 22 length
	   20 7C 20 35 20
	   7C 20 36 20 7C
	   20 2D 20 7C 20
	   7C 20 0D 0A
 000000C6  7C 20 7C 5F 5F				byte "| |___|___|___|___| | ",CR,LF       ;ROW 8, 22 length
	   5F 7C 5F 5F 5F
	   7C 5F 5F 5F 7C
	   5F 5F 5F 7C 20
	   7C 20 0D 0A
 000000DE  7C 20 7C 20 31				byte "| | 1 | 2 | 3 | * | | ",CR,LF       ;ROW 9, 22 length
	   20 7C 20 32 20
	   7C 20 33 20 7C
	   20 2A 20 7C 20
	   7C 20 0D 0A
 000000F6  7C 20 7C 5F 5F				byte "| |___|___|___|___| | ",CR,LF       ;ROW 10, 22 length
	   5F 7C 5F 5F 5F
	   7C 5F 5F 5F 7C
	   5F 5F 5F 7C 20
	   7C 20 0D 0A
 0000010E  7C 20 7C 20 43				byte "| | C | 0 | = | / | | ",CR,LF		  ;ROW 11, 22 length
	   20 7C 20 30 20
	   7C 20 3D 20 7C
	   20 2F 20 7C 20
	   7C 20 0D 0A
 00000126  7C 20 7C 5F 5F				byte "| |___|___|___|___| | ",CR,LF		  ;ROW 12, 22 length
	   5F 7C 5F 5F 5F
	   7C 5F 5F 5F 7C
	   5F 5F 5F 7C 20
	   7C 20 0D 0A
 0000013E  7C 5F 5F 5F 5F				byte "|___________________| ",CR,LF, NULL ;ROW 13, 22 length
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   7C 20 0D 0A 00

				;---Strings---;
 00000157 20 2B 3D 3D 3D	fline       byte  " +==========================================================+", CR, LF, NULL
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   2B 0D 0A 00
 00000197 0D 0A 00		nline		byte   CR, LF, NULL						  ;new line string.
 0000019A 20 7C 5C 20 20	Msg0	    byte  " |\        Interactive Calculator Program                  /|", CR, LF, NULL
	   20 20 20 20 20
	   20 49 6E 74 65
	   72 61 63 74 69
	   76 65 20 43 61
	   6C 63 75 6C 61
	   74 6F 72 20 50
	   72 6F 67 72 61
	   6D 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2F
	   7C 0D 0A 00
 000001DA 20 7C 2F 20 20	Msg1		byte  " |/        CREATED BY: bdahmerj                            \|", CR, LF, NULL
	   20 20 20 20 20
	   20 43 52 45 41
	   54 45 44 20 42
	   59 3A 20 62 64
	   61 68 6D 65 72
	   6A 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 5C
	   7C 0D 0A 00
 0000021A 20 2B 3D 3D 3D	Msg2   		byte  " +==========================================================+", CR, LF, NULL
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   3D 3D 3D 3D 3D
	   2B 0D 0A 00

				;---Storage For Variables---;
 0000025A  00000064 [		Ary			byte  100 dup(' ')				    ;size of the array.(might be enough).
	    20
	   ]
 000002BE  00000011 [		Bry			byte  17  dup(CR),NULL				;size of the array.(might be enough).
	    0D
	   ] 00
 000002D0 00			AryLen		byte  NULL							;holds the size of the array (Ary).
 000002D1 00			BryLen		byte  NULL							;holds the size of the array (Bry).
 000002D2 00000000		valA		dword NULL							;default is 0.
 000002D6 00000000		valB		dword NULL							;default is 0.
 000002DA 00000000		valC		dword NULL							;default is 0.
 000002DE 3D			equalSign   byte '='							;equal sign.
 000002DF 20			opVal	    byte ' '							;default is space, changes to which operator is selected on calculator.
 000002E0 00			savedX		byte  NULL							;save last 'X' position on calculator before display num(s).
 000002E1 00			savedY		byte  NULL							;save last 'Y' position on calculator before display num(s).
 000002E2 00000000		tptr		dword NULL							;pointer to hold a memory address.

				;---MACROS---;
				;;Gets the Length of an Array that is input.
				mLength Macro array
					lea edi, array			;;point to the array.
					xor eax, eax			;flush eax.
					xor ecx, ecx			;flush ecx.
					call GetLength			;;calls getLength Procedure.
				endm
				;;Sets up the message so it does not exceed display size.
				mSetMsg Macro Array, Len
						xor eax,eax			;flush eax register.
						mov dl, ANS_COL		;move answer column into dl (column position).
						sub dl, Len			;subtract Len so that it will write right to left.
						mov dh, ANS_ROW		;move answer row into dh (row position).
						call Gotoxy			;move cursor.
						lea edi, Array		;point to Ary or Bry (array).
						mov cl, Len			;move array length into cl register.
				endm

 00000000			.code
 00000000			main PROC

 00000000  E8 0000000C			call SetupCalculator		;Setup calculator display on console and set cursor position.
 00000005  E8 00000093			call Calculator				;Interacting with calculator.

					invoke ExitProcess, 0
 0000000A  6A 00	   *	    push   +000000000h
 0000000C  E8 00000000 E   *	    call   ExitProcess
 00000011			main endp

				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				;; SetupCalculator Procedure             ;;
				;; to change colors/display calculator on;;
				;; the console and set cursor position.  ;;
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 00000011			SetupCalculator proc
 00000011  B8 0000000D			mov eax,13 +(black SHL 4)  ;setup console color.
 00000016  E8 00000000 E		call SetTextColor		   ;call text color change procedure.
 0000001B  8D 3D 00000006 R		lea edi, calStr			   ;point to calStr to print console layout design.
 00000021  E8 00000068			call WriteStr			   ;write calculator string to the console using WriteStr procedure.

 00000026  B8 0000000D			mov eax,13 +(black SHL 4)  ;setup console color as black and light blue.
 0000002B  E8 00000000 E		call SetTextColor		   ;call text color change procedure.

 00000030  8D 3D 00000197 R		lea edi, nline			   ;string for new line.
 00000036  E8 00000053			call WriteStr			   ;p rints to console.
 0000003B  8D 3D 00000197 R		lea edi, nline			   ;string for new line.
 00000041  E8 00000048			call WriteStr			   ;prints to console.
 00000046  8D 3D 00000157 R		lea edi, fline			   ;string for == line.
 0000004C  E8 0000003D			call WriteStr			   ;prints to console.

 00000051  8D 3D 0000019A R		lea edi, Msg0			   ;Interactive Program Message at bottom.
 00000057  E8 00000032			call WriteStr			   ;Write to Console.
					
 0000005C  8D 3D 000001DA R		lea edi, Msg1			   ;created by string.
 00000062  E8 00000027			call WriteStr			   ;write to console.

 00000067  8D 3D 00000157 R		lea edi, fline			   ;string for == line.
 0000006D  E8 0000001C			call WriteStr			   ;write to console.

 00000072  B8 0000000C			mov eax,12 +(black SHL 4)  ;setup console color.
 00000077  E8 00000000 E		call SetTextColor		   ;call text color change procedure.

 0000007C  8D 35 00000006 R		lea esi, calStr			   ;point to calStr
 00000082  33 D2			xor edx,edx				   ;flush register.
 00000084  B6 09			mov dh, 9	;row		   ;starting Row for cursor.
 00000086  B2 04			mov dl, 4	;col		   ;starting Column for cursor.
 00000088  E8 00000000 E		call Gotoxy				   ;call to move the cursor.
 0000008D  C3				ret						   ;return to main procedure.
 0000008E			SetupCalculator endp

				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				;;;Procedure to write a string to console;;
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 0000008E			WriteStr proc
 0000008E			Nextchar:	
 0000008E  8A 07				mov al, [edi]			;increment edi by one character through the array of chars byte size
 00000090  3C 00		   		cmp al, NULL			;checking to see if al is equal to zero
 00000092  74 08				je nearEnd  			;jump out of this procedure
 00000094  E8 00000000 E			call WriteChar			;invoked character write to console
 00000099  47					inc edi					;move to next character.
 0000009A  EB F2		jmp Nextchar
 0000009C			nearEnd:
 0000009C  C3					ret
 0000009D			WriteStr endp

				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				;; Procedure to Read Character from keyboard;;
				;; then write character to console.         ;;
				;; esi holds position in CalStr				;;
				;; edi holds position in Ary (equation)     ;;
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 0000009D			Calculator Proc				
 0000009D  33 C0			xor eax, eax			;flush eax register.
 0000009F  33 DB			xor ebx, ebx			;flush ebx register.
 000000A1  8D 35 00000006 R		lea esi, calStr			;point to calStr
 000000A7  81 C6 000000DC		add esi, 220			;add 220 (start position)
 000000AD  8D 3D 0000025A R		lea edi, Ary			;point to Ary (will store equation).
 000000B3				Continue:
 000000B3  33 C0				xor eax,eax			;flush out the register data.
 000000B5  E8 00000000 E			call ReadChar		;read character from keyboard.
 000000BA  3C 1B				cmp al, ECP			;escape entered, program will terminate.
 000000BC  0F 84 0000013F		je quit
 000000C2  3C 0D				cmp al, CR			;checks for carriage return, which means the user selected a number.
 000000C4  74 5E			je inputNumber
 000000C6  80 FC 4D				cmp ah, RA			;Right arrow check.
 000000C9  74 0F			je  R_Arrow
 000000CB  80 FC 4B		        cmp ah, LA			;Left arrow check.
 000000CE  74 1E			je  L_Arrow
 000000D0  80 FC 50				cmp ah, DA			;Down arrow check.
 000000D3  74 2B			je D_Arrow
 000000D5  80 FC 48				cmp ah, UA			;Up arrow check.
 000000D8  74 38			je U_Arrow

 000000DA				R_Arrow:
 000000DA  80 FA 10				cmp dl, Max_R		;checking bounds of calculator on right arrow.
 000000DD  74 D4			je Continue
 000000DF  80 C2 04				add dl, 4			;increment over 4 spaces (next value).
 000000E2  E8 00000000 E			call Gotoxy			;move cursor.
 000000E7  83 C6 04				add esi, 4			;mov esi to point to character on. (shifting to right).
 000000EA  EB C7				jmp Continue		;jump to continue reading characters.
 000000EC  75 C5			jne Continue
 000000EE				L_Arrow:
 000000EE  80 FA 04				cmp dl, Max_L		;checking bounds of calculator on left arrow.
 000000F1  74 C0			je Continue
 000000F3  80 EA 04				sub dl, 4			;decrement over 4 spaces (next value).
 000000F6  E8 00000000 E			call Gotoxy			;move cursor.
 000000FB  83 EE 04				sub esi, 4			;mov esi to point to character on. (shifting to left).
 000000FE  EB B3				jmp Continue		;jump to continue reading characters.
 00000100				D_Arrow:
 00000100  80 FE 0B				cmp dh, Max_D		;checking bounds of calculator on down arrow.
 00000103  74 AE			je Continue
 00000105  80 C6 02				add dh, 2			;add 2 to dh, shift row down 2.
 00000108  E8 00000000 E			call Gotoxy			;move cursor.
 0000010D  83 C6 30				add esi, 48			;
 00000110  EB A1				jmp Continue		;jump to continue reading characters.
 00000112				U_Arrow:
 00000112  80 FE 05				cmp dh, Max_U		;checking bounds of calculator on up arrow.
 00000115  74 9C			je Continue
 00000117  80 EE 02				sub dh, 2			;subtract 2 from dh, shift row up 2.
 0000011A  E8 00000000 E			call Gotoxy
 0000011F  83 EE 30				sub esi, 48			;
 00000122  EB 8F				jmp Continue		;jump to continue reading characters.
 00000124				inputNumber:
 00000124  8A 1E				mov bl, [esi]		;move number into bl register.
 00000126  3A 1D 000002DE R			cmp bl, equalSign	;looking for equal sign.
 0000012C  74 72			je getAnswer
 0000012E  80 FB 43				cmp bl, CLR			;checking for 'C' input to clear the display box.
 00000131  0F 84 000000AE		je clearit
 00000137  88 1F				mov [edi], bl		;storing new value into Ary.
 00000139  52					push edx			;push col to stack.
 0000013A  53					push ebx			;push bl to stack.
						
						mLength Ary			;MACRO CALL get length of Ary, uses cl and edi
 0000013B  8D 3D 0000025A R  1		lea edi, Ary			
 00000141  33 C0	     1		xor eax, eax			
 00000143  33 C9	     1		xor ecx, ecx			
 00000145  E8 0000021B	     1		call GetLength			
 0000014A  88 0D 000002D0 R			mov AryLen, cl		;get length from cl register and move to AryLen.
 00000150  80 3D 000002D0 R			cmp AryLen, aLimit  ;check size of array to make sure smaller than limit.
	   0F
 00000157  7E 07			jle SetMsg
 00000159  B0 0F				mov al, aLimit		;limit check, display is max at aLimit.
 0000015B  A2 000002D0 R			mov AryLen, al		;move AryLen (length into al register).
 00000160				SetMsg:
						mSetMsg Ary, AryLen ;MACRO call
 00000160  33 C0	     1			xor eax,eax			;flush eax register.
 00000162  8A 15 00000005 R  1			mov dl, ANS_COL		;move answer column into dl (column position).
 00000168  2A 15 000002D0 R  1			sub dl, AryLen			;subtract Len so that it will write right to left.
 0000016E  8A 35 00000004 R  1			mov dh, ANS_ROW		;move answer row into dh (row position).
 00000174  E8 00000000 E     1			call Gotoxy			;move cursor.
 00000179  8D 3D 0000025A R  1			lea edi, Ary		;point to Ary or Bry (array).
 0000017F  8A 0D 000002D0 R  1			mov cl, AryLen			;move array length into cl register.
 00000185				PrintAns:
 00000185  8A 07				mov al, [edi]		;move first character into al register.
 00000187  E8 00000000 E			call WriteChar		;write character to the screen.
 0000018C  47					inc edi				;increment edi register by one byte.
 0000018D  FE C9				dec cl				;decrement counter in cl.
 0000018F  80 F9 00				cmp cl, NULL		;compare cl to 0.
 00000192  75 F1			jne PrintAns
 00000194  5B					pop ebx				;get ebx register off the stack.
 00000195  5A					pop edx				;get edx register (dh & dl) from last position cursor was on before going to Display location.
 00000196  E8 00000000 E			call Gotoxy			;move the cursor.
 0000019B  E9 FFFFFF13			jmp Continue			;jump to Continue.
 000001A0				getAnswer:
 000001A0  52					push edx			;push edx to the stack.
 000001A1  53					push ebx			;push ebx to the stack.
 000001A2  E8 000000D7				call ClrField		;will clear the input/output field.
 000001A7  E8 00000106				call CalculateAns	;will calculate the answer and move it into Bry
 000001AC  C6 05 000002D1 R			mov BryLen, aLimit  ;move limiter in BryLen
	   0F
 000001B3  80 3D 000002D1 R			cmp BryLen, aLimit	;compare for jump.
	   0F
 000001BA  7E 02			jle SetMsg2
 000001BC  EB C7			jmp PrintAns			;jump if BryLen is less or equal to aLimit.
 000001BE					SetMsg2:
						mSetMsg Bry, BryLen ;resize BryLen to fit aLimit.
 000001BE  33 C0	     1			xor eax,eax			;flush eax register.
 000001C0  8A 15 00000005 R  1			mov dl, ANS_COL		;move answer column into dl (column position).
 000001C6  2A 15 000002D1 R  1			sub dl, BryLen			;subtract Len so that it will write right to left.
 000001CC  8A 35 00000004 R  1			mov dh, ANS_ROW		;move answer row into dh (row position).
 000001D2  E8 00000000 E     1			call Gotoxy			;move cursor.
 000001D7  8D 3D 000002BE R  1			lea edi, Bry		;point to Ary or Bry (array).
 000001DD  8A 0D 000002D1 R  1			mov cl, BryLen			;move array length into cl register.
 000001E3  EB A0			jmp PrintAns			;jump to Print answers.

 000001E5				clearit:
 000001E5  89 35 000002E2 R			mov tptr, esi		;temporary pointer to hold esi's last address.
 000001EB  E8 0000001B				call ClrAll			;call to clear input/output arrays, and message field.
 000001F0  8D 3D 0000025A R			lea edi, Ary		;point back to Ary array.
 000001F6  8B 35 000002E2 R			mov esi, tptr
 000001FC  E9 FFFFFEB2			jmp Continue			;go back to the screen to read next input.
 00000201				quit:
 00000201  B2 00				mov dl, 0			;move to first column	
 00000203  B6 19				mov dh, 25			;move below interactive calculator upon exit.
 00000205  E8 00000000 E			call Gotoxy
 0000020A  C3					ret					;returns to main proc
 0000020B			Calculator endp				;end of procedure

				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				;; ClrAll procedure, clears out all saved ;;
				;; values in Ary, Bry, AryLen, BryLen.    ;;
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 0000020B			ClrAll proc
 0000020B  88 35 000002E0 R	 	mov savedX, dh			;saving row. 
 00000211  88 15 000002E1 R		mov savedY, dl			;saving column.
					mLength Ary				;MACRO call to set cl equal to length of filled spots in array.			
 00000217  8D 3D 0000025A R  1		lea edi, Ary			
 0000021D  33 C0	     1		xor eax, eax			
 0000021F  33 C9	     1		xor ecx, ecx			
 00000221  E8 0000013F	     1		call GetLength			
 00000226  80 F9 00			cmp cl, NULL			;checking if array is not filled, for error handling, cl cannot be NULL for the loop.
 00000229  74 2E			je Done
 0000022B  8D 3D 0000025A R		lea edi, Ary			;point at Array to blankout.
 00000231  B0 20			mov al, SPC				;move SPC character into al register.
 00000233				C1:						
 00000233  88 07				mov [edi], al		;move into index to blank it out.
 00000235  47					inc edi				;increment edi.
 00000236  E2 FB			loop C1

					mLength Bry				;MACRO call to set cl equal to length of filled spots in array.
 00000238  8D 3D 000002BE R  1		lea edi, Bry			
 0000023E  33 C0	     1		xor eax, eax			
 00000240  33 C9	     1		xor ecx, ecx			
 00000242  E8 0000011E	     1		call GetLength			
 00000247  80 F9 00			cmp cl, NULL			;checking if array is not filled, for error handling, cl cannot be NUL for the loop.
 0000024A  74 0D			je Done
 0000024C  8D 3D 000002BE R		lea edi, Bry			;point to Array to blankout.
 00000252  B0 20			mov al, SPC				;move SPC character into al register.
 00000254				C2:
 00000254  88 07				mov [edi], al		;move into index to blank it out.
 00000256  47					inc edi				;increment edi.
 00000257  E2 FB			loop C2
					
 00000259				Done:					
 00000259  E8 00000020			call ClrField			;clearing message field.	
 0000025E  C6 05 000002D1 R		mov BryLen, NULL		;setting back to null.
	   00
 00000265  C6 05 000002D0 R		mov AryLen, NULL		;setting back to null.
	   00

 0000026C  8A 35 000002E0 R		mov dh, savedX			;resetting column.
 00000272  8A 15 000002E1 R		mov dl, savedY			;resetting row.
 00000278  E8 00000000 E		call Gotoxy				;move cursor.

 0000027D  C3				ret						;returning to procedure that called it.
 0000027E			ClrAll endp

				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				;; ClrField procedure, write blanks to    ;;
				;; the console where the input/output     ;;
				;; field is located.                      ;;
				;; uses: al, cl, dh, dl registers.        ;;
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 0000027E			ClrField proc
 0000027E  33 D2			xor edx, edx			;flushing the edx register.
 00000280  33 C9			xor ecx, ecx			;flushing the ecx register.
 00000282  B0 20			mov al, SPC				;put space in field.
 00000284  8A 35 00000004 R		mov dh, ANS_ROW  		;row the msg field is in.
 0000028A  8A 15 00000005 R		mov dl, ANS_COL 		;column the msg field starts in.
 00000290  FE CA			dec dl					;get to 17th position. I use the 18 for display easier to decrement 1 here.
 00000292  B1 0F			mov cl, aLimit			;limit of msg field.
 00000294  E8 00000000 E		call Gotoxy				;move cursor.
 00000299				L1:	
 00000299  E8 00000000 E			call WriteChar		;write value to console.
 0000029E  FE CA				dec dl				;decrement column <---going this direction.
 000002A0  E8 00000000 E			call Gotoxy			;move cursor <-- this direction.
 000002A5  E2 F2			loop L1

 000002A7  B8 0000000C			mov eax,12 +(black SHL 4)  ;setup console color as black and light blue.
 000002AC  E8 00000000 E		call SetTextColor		   ;call text color change procedure.
 000002B1  C3				ret						;return to the procudure that called it.
 000002B2			ClrField endp

				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				;; CalculateAns procedure, will perform   ;;
				;; the necessary calculations to fill     ;;
				;; Bry with the answer in ASCII form.     ;;
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 000002B2			CalculateAns proc
 000002B2  8D 3D 0000025A R		lea edi, Ary
 000002B8  E8 000000B4			call ATOI				;reads until operator value is found.
 000002BD  A3 000002D2 R		mov valA, eax
 000002C2  8A 07			mov al, [edi]			;check for operator
 000002C4  A2 000002DF R		mov opVal, al			;store operator value.
 000002C9  47				inc edi					;get past operator index.
 000002CA  E8 000000A2			call ATOI				;reads to the end.
 000002CF  A3 000002D6 R		mov valB, eax			;store next value to calculate.
					
 000002D4  80 3D 000002DF R			cmp opVal, '+'		;check for addition.
	   2B
 000002DB  74 1B			je Addition
 000002DD  80 3D 000002DF R			cmp opVal, '-'		;check for subtraction.
	   2D
 000002E4  74 21			je Subtraction
 000002E6  80 3D 000002DF R			cmp opVal, '*'		;check for multiplication.
	   2A
 000002ED  74 27			je Multiply
 000002EF  80 3D 000002DF R			cmp opVal, '/'		;check for division.
	   2F
 000002F6  74 2E			je Division

 000002F8				Addition:
 000002F8  A1 000002D2 R			mov eax, valA		;move valA into eax register.
 000002FD  8B 1D 000002D6 R			mov ebx, valB		;move valB into ebx register.
 00000303  03 C3				add eax, ebx		;add eax and ebx, store in eax register.
 00000305  EB 2E			jmp Done

 00000307				Subtraction:
 00000307  A1 000002D2 R			mov eax, valA		;move valA into eax register.
 0000030C  8B 1D 000002D6 R			mov ebx, valB		;move valB into ebx register.
 00000312  2B C3				sub eax, ebx		;subtract ebx from eax register.
 00000314  EB 1F			jmp Done
					
 00000316				Multiply:
 00000316  A1 000002D2 R			mov eax, valA		;move valA into eax register.
 0000031B  8B 1D 000002D6 R			mov ebx, valB		;move valB into ebx register.
 00000321  0F AF C3				imul eax, ebx		;perform signed multiplication.
 00000324  EB 0F		     jmp done

 00000326				Division:
 00000326  33 D2				xor edx, edx		;flush edx register.
 00000328  A1 000002D2 R			mov eax, valA		;move valA into eax register.
 0000032D  8B 1D 000002D6 R			mov ebx, valB		;move valB into ebx register.
 00000333  F7 FB				idiv ebx			;perform division. storing value into eax register.

 00000335				Done:
 00000335  A3 000002DA R			mov valC, eax		;move solution into valC
 0000033A  B9 0000000F				mov ecx, aLimit
 0000033F  8D 3D 000002BE R			lea edi, Bry
 00000345  E8 00000066				call BlankOut
 0000034A  A1 000002DA R			mov eax, valC
 0000034F  E8 00000043				call ITOA
 00000354  8D 3D 000002BE R			lea edi, Bry		;

 0000035A  B8 0000000A				mov eax,10 +(black SHL 4)  ;setup console color as black and light blue.
 0000035F  E8 00000000 E			call SetTextColor		   ;call text color change procedure.
 00000364  C3					ret						;returns to calculator procedure.
 00000365			CalculateAns endp
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				;;Gets Array Length uses a macro prior to ;;
				;; being called, (mLength [array] <-Arg)  ;;
				;; return: cl holds length value in byte  ;;
				;; size.                                  ;;
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 00000365			GetLength proc
 00000365				C1:
 00000365  8A 07				mov al,[edi]	;move value edi points to into al register.
 00000367  3C 20				cmp al, SPC		;check for space.
 00000369  74 05			je C2
 0000036B  FE C1				inc cl  		;increment counter.
 0000036D  47					inc edi			;increment the array.
 0000036E  EB F5				jmp C1	
 00000370				C2:
 00000370  C3					ret				;returns to the procedure that called it.
 00000371			GetLength endp

				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				;; Procedure to ASCII to Integer.        ;;
				;; setup to use edi.					 ;;
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 00000371			ATOI Proc
 00000371  B8 00000000			mov eax, 0							;zero out eax register.
 00000376  BB 00000000	mov ebx, 0							;zero out ebx register.
 0000037B			NextDigit:
 0000037B  8A 1F				mov bl, [edi]					;move value esi points to into bl   
 0000037D  80 FB 30				cmp bl, '0'						;compare digit to 0 character
 00000380  7C 14			jl getOut							;jump if less than
 00000382  80 FB 39				cmp bl, '9'						;compare digit to 9 character
 00000385  7F 0F			jg getOut							;jump if greater than
 00000387  80 E3 0F				AND bl, 0Fh						;ANDing the value (real fast).
 0000038A  0F AF 05			    imul eax, TEN					;multiply eax by 10
	   00000000 R
 00000391  03 C3			    add eax, ebx					;add ebx register to eax register.
 00000393  47					inc edi							;increment the ptr
 00000394  EB E5		jmp NextDigit
 00000396				getOut:
 00000396  C3					ret								;returns to main proc.
 00000397			ATOI endp

				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				;;Procedure to Integer to ASCII.         ;;
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
 00000397			ITOA Proc
 00000397  8B 1D 00000000 R		mov ebx, TEN						;setting base value for the ascii number.
 0000039D				NextDigit: 
 0000039D  BA 00000000				mov edx, NULL					;setup for divide
 000003A2  F7 FB				idiv ebx						;edx ax/ebx
 000003A4  83 CA 30				OR edx, '0'						;converting digit to ASCII by adding 30h or '0'
 000003A7  4F					dec edi							;decrementing the pointer to get to the next digit  <----goes backwards from LSB to MSB
 000003A8  88 17				mov [edi],dl					;mov dl not location esi is pointing at.
 000003AA  83 F8 00				cmp eax, NULL					;compares eax to 0.
 000003AD  75 EE			jne NextDigit
 000003AF  C3				ret									;returns to main proc.
 000003B0			ITOA endp

				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				;; Procedure to BlankOut Memory.         ;;
				;; setup to use edi.				     ;;
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 000003B0			BlankOut Proc
 000003B0  B0 20			mov al, SPC							;moving a blank to al.
 000003B2			blank:
 000003B2  88 07			mov[edi], al						;point to al.
 000003B4  47				inc edi								;increment esi pointer.
 000003B5  49				dec ecx								;decrement ecx counter.
 000003B6  83 F9 00			cmp ecx, NULL						;compare ecx to NULL.
 000003B9  75 F7		jne blank
 000003BB  C3				ret									;return to main proc.
 000003BC			BlankOut endp

				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				;;-----------END OF PROGRAM--------------;;
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
				end main
Microsoft (R) Macro Assembler Version 14.29.30141.0	    03/17/23 13:35:53
InteractiveCalculator.asm				     Symbols 2 - 1




Macros:

                N a m e                 Type

mLength  . . . . . . . . . . . .	Proc
mSetMsg  . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000002E6 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000003BC Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ATOI . . . . . . . . . . . . . .	P Near	 00000371 _TEXT	Length= 00000026 Public STDCALL
  NextDigit  . . . . . . . . . .	L Near	 0000037B _TEXT	
  getOut . . . . . . . . . . . .	L Near	 00000396 _TEXT	
BlankOut . . . . . . . . . . . .	P Near	 000003B0 _TEXT	Length= 0000000C Public STDCALL
  blank  . . . . . . . . . . . .	L Near	 000003B2 _TEXT	
CalculateAns . . . . . . . . . .	P Near	 000002B2 _TEXT	Length= 000000B3 Public STDCALL
  Addition . . . . . . . . . . .	L Near	 000002F8 _TEXT	
  Subtraction  . . . . . . . . .	L Near	 00000307 _TEXT	
  Multiply . . . . . . . . . . .	L Near	 00000316 _TEXT	
  Division . . . . . . . . . . .	L Near	 00000326 _TEXT	
  Done . . . . . . . . . . . . .	L Near	 00000335 _TEXT	
Calculator . . . . . . . . . . .	P Near	 0000009D _TEXT	Length= 0000016E Public STDCALL
  Continue . . . . . . . . . . .	L Near	 000000B3 _TEXT	
  R_Arrow  . . . . . . . . . . .	L Near	 000000DA _TEXT	
  L_Arrow  . . . . . . . . . . .	L Near	 000000EE _TEXT	
  D_Arrow  . . . . . . . . . . .	L Near	 00000100 _TEXT	
  U_Arrow  . . . . . . . . . . .	L Near	 00000112 _TEXT	
  inputNumber  . . . . . . . . .	L Near	 00000124 _TEXT	
  SetMsg . . . . . . . . . . . .	L Near	 00000160 _TEXT	
  PrintAns . . . . . . . . . . .	L Near	 00000185 _TEXT	
  getAnswer  . . . . . . . . . .	L Near	 000001A0 _TEXT	
  SetMsg2  . . . . . . . . . . .	L Near	 000001BE _TEXT	
  clearit  . . . . . . . . . . .	L Near	 000001E5 _TEXT	
  quit . . . . . . . . . . . . .	L Near	 00000201 _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ClrAll . . . . . . . . . . . . .	P Near	 0000020B _TEXT	Length= 00000073 Public STDCALL
  C1 . . . . . . . . . . . . . .	L Near	 00000233 _TEXT	
  C2 . . . . . . . . . . . . . .	L Near	 00000254 _TEXT	
  Done . . . . . . . . . . . . .	L Near	 00000259 _TEXT	
ClrField . . . . . . . . . . . .	P Near	 0000027E _TEXT	Length= 00000034 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000299 _TEXT	
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLength  . . . . . . . . . . .	P Near	 00000365 _TEXT	Length= 0000000C Public STDCALL
  C1 . . . . . . . . . . . . . .	L Near	 00000365 _TEXT	
  C2 . . . . . . . . . . . . . .	L Near	 00000370 _TEXT	
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ITOA . . . . . . . . . . . . . .	P Near	 00000397 _TEXT	Length= 00000019 Public STDCALL
  NextDigit  . . . . . . . . . .	L Near	 0000039D _TEXT	
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetupCalculator  . . . . . . . .	P Near	 00000011 _TEXT	Length= 0000007D Public STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStr . . . . . . . . . . . .	P Near	 0000008E _TEXT	Length= 0000000F Public STDCALL
  Nextchar . . . . . . . . . . .	L Near	 0000008E _TEXT	
  nearEnd  . . . . . . . . . . .	L Near	 0000009C _TEXT	
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000011 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ANS_COL  . . . . . . . . . . . .	Byte	 00000005 _DATA	
ANS_ROW  . . . . . . . . . . . .	Byte	 00000004 _DATA	
AryLen . . . . . . . . . . . . .	Byte	 000002D0 _DATA	
Ary  . . . . . . . . . . . . . .	Byte	 0000025A _DATA	
BryLen . . . . . . . . . . . . .	Byte	 000002D1 _DATA	
Bry  . . . . . . . . . . . . . .	Byte	 000002BE _DATA	
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CLR  . . . . . . . . . . . . . .	Number	 00000043h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CR . . . . . . . . . . . . . . .	Number	 0000000Dh   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DA . . . . . . . . . . . . . . .	Number	 00000050h   
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ECP  . . . . . . . . . . . . . .	Number	 0000001Bh   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LA . . . . . . . . . . . . . . .	Number	 0000004Bh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LF . . . . . . . . . . . . . . .	Number	 0000000Ah   
MAX_D  . . . . . . . . . . . . .	Number	 0000000Bh   
MAX_L  . . . . . . . . . . . . .	Number	 00000004h   
MAX_R  . . . . . . . . . . . . .	Number	 00000010h   
MAX_U  . . . . . . . . . . . . .	Number	 00000005h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
Msg0 . . . . . . . . . . . . . .	Byte	 0000019A _DATA	
Msg1 . . . . . . . . . . . . . .	Byte	 000001DA _DATA	
Msg2 . . . . . . . . . . . . . .	Byte	 0000021A _DATA	
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RA . . . . . . . . . . . . . . .	Number	 0000004Dh   
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
SPC  . . . . . . . . . . . . . .	Number	 00000020h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TEN  . . . . . . . . . . . . . .	DWord	 00000000 _DATA	
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
UA . . . . . . . . . . . . . . .	Number	 00000048h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
aLimit . . . . . . . . . . . . .	Number	 0000000Fh   
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
calStr . . . . . . . . . . . . .	Byte	 00000006 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
equalSign  . . . . . . . . . . .	Byte	 000002DE _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fline  . . . . . . . . . . . . .	Byte	 00000157 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
nline  . . . . . . . . . . . . .	Byte	 00000197 _DATA	
opVal  . . . . . . . . . . . . .	Byte	 000002DF _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
savedX . . . . . . . . . . . . .	Byte	 000002E0 _DATA	
savedY . . . . . . . . . . . . .	Byte	 000002E1 _DATA	
tptr . . . . . . . . . . . . . .	DWord	 000002E2 _DATA	
valA . . . . . . . . . . . . . .	DWord	 000002D2 _DATA	
valB . . . . . . . . . . . . . .	DWord	 000002D6 _DATA	
valC . . . . . . . . . . . . . .	DWord	 000002DA _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
